// src/index.tsx
import {
  createContext,
  useContext as _useContext,
  useEffect
} from "react";
import {
  useQuery as __useQuery,
  useInfiniteQuery as __useInfiniteQuery,
  useMutation as __useMutation,
  hashQueryKey,
  QueryClientProvider
} from "@tanstack/react-query";
import { jsx } from "react/jsx-runtime";
function createReactQueryHooks() {
  const Context = createContext(void 0);
  function useContext() {
    const ctx = _useContext(Context);
    if ((ctx == null ? void 0 : ctx.queryClient) === void 0)
      throw new Error(
        "The rspc context has not been set. Ensure you have the <rspc.Provider> component higher up in your component tree."
      );
    return ctx;
  }
  function customQuery(map) {
    return (keyAndInput, opts) => {
      const { rspc, ...rawOpts } = opts ?? {};
      let client = rspc == null ? void 0 : rspc.client;
      if (!client) {
        client = useContext().client;
      }
      return __useQuery(
        map(keyAndInput),
        async () => {
          return await client.query(map(keyAndInput));
        },
        rawOpts
      );
    };
  }
  function useQuery(keyAndInput, opts) {
    const { rspc, ...rawOpts } = opts ?? {};
    let client = rspc == null ? void 0 : rspc.client;
    if (!client) {
      client = useContext().client;
    }
    return __useQuery(
      keyAndInput,
      async () => {
        return await client.query(keyAndInput);
      },
      rawOpts
    );
  }
  function useInfiniteQuery(keyAndInput, opts) {
    const { rspc, ...rawOpts } = opts ?? {};
    let client = rspc == null ? void 0 : rspc.client;
    if (!client) {
      client = useContext().client;
    }
    return __useInfiniteQuery(
      keyAndInput,
      async () => {
        throw new Error("TODO");
      },
      rawOpts
    );
  }
  function customMutation(map) {
    return (key, opts) => {
      const { rspc, ...rawOpts } = opts ?? {};
      let client = rspc == null ? void 0 : rspc.client;
      if (!client) {
        client = useContext().client;
      }
      return __useMutation(async (input) => {
        const actualKey = Array.isArray(key) ? key[0] : key;
        return client.mutation(map([actualKey, input]));
      }, rawOpts);
    };
  }
  function useMutation(key, opts) {
    const { rspc, ...rawOpts } = opts ?? {};
    let client = rspc == null ? void 0 : rspc.client;
    if (!client) {
      client = useContext().client;
    }
    return __useMutation(async (input) => {
      const actualKey = Array.isArray(key) ? key[0] : key;
      return client.mutation([actualKey, input]);
    }, rawOpts);
  }
  function useSubscription(keyAndInput, opts) {
    var _a;
    let client = (_a = opts == null ? void 0 : opts.rspc) == null ? void 0 : _a.client;
    if (!client) {
      client = useContext().client;
    }
    const queryKey = hashQueryKey(keyAndInput);
    const enabled = (opts == null ? void 0 : opts.enabled) ?? true;
    return useEffect(() => {
      if (!enabled) {
        return;
      }
      let isStopped = false;
      const unsubscribe = client.addSubscription(
        keyAndInput,
        {
          onStarted: () => {
            var _a2;
            if (!isStopped) {
              (_a2 = opts.onStarted) == null ? void 0 : _a2.call(opts);
            }
          },
          onData: (data) => {
            if (!isStopped) {
              opts.onData(data);
            }
          },
          onError: (err) => {
            var _a2;
            if (!isStopped) {
              (_a2 = opts.onError) == null ? void 0 : _a2.call(opts, err);
            }
          }
        }
      );
      return () => {
        isStopped = true;
        unsubscribe();
      };
    }, [queryKey, enabled]);
  }
  return {
    _rspc_def: void 0,
    Provider: ({
      children,
      client,
      queryClient
    }) => /* @__PURE__ */ jsx(Context.Provider, {
      value: {
        client,
        queryClient
      },
      children: /* @__PURE__ */ jsx(QueryClientProvider, {
        client: queryClient,
        children
      })
    }),
    useContext,
    customQuery,
    useQuery,
    customMutation,
    useMutation,
    useSubscription
  };
}
export {
  createReactQueryHooks
};
//# sourceMappingURL=index.mjs.map